using System;
using System.Numerics;

namespace Furball.Lanugo {
    public unsafe struct IDirect3DDevice8 {
        public void** Vtbl;

        public IntPtr QueryInterfacePtr => (IntPtr) this.Vtbl[0];
        public IntPtr AddRefPtr => (IntPtr) this.Vtbl[1];
        public IntPtr ReleasePtr => (IntPtr) this.Vtbl[2];
        public IntPtr TestCooperativeLevelPtr => (IntPtr) this.Vtbl[3];
        public IntPtr GetAvailableTextureMemPtr => (IntPtr) this.Vtbl[4];
        public IntPtr ResourceManagerDiscardBytesPtr => (IntPtr) this.Vtbl[5];
        public IntPtr GetDirect3DPtr => (IntPtr) this.Vtbl[6];
        public IntPtr GetDeviceCapsPtr => (IntPtr) this.Vtbl[7];
        public IntPtr GetDisplayModePtr => (IntPtr) this.Vtbl[8];
        public IntPtr GetCreationParametersPtr => (IntPtr) this.Vtbl[9];
        public IntPtr SetCursorPropertiesPtr => (IntPtr) this.Vtbl[10];
        public IntPtr SetCursorPositionPtr => (IntPtr) this.Vtbl[11];
        public IntPtr ShowCursorPtr => (IntPtr) this.Vtbl[12];
        public IntPtr CreateAdditionalSwapChainPtr => (IntPtr) this.Vtbl[13];
        public IntPtr ResetPtr => (IntPtr) this.Vtbl[14];
        public IntPtr PresentPtr => (IntPtr) this.Vtbl[15];
        public IntPtr GetBackBufferPtr => (IntPtr) this.Vtbl[16];
        public IntPtr GetRasterStatusPtr => (IntPtr) this.Vtbl[17];
        public IntPtr SetGammaRampPtr => (IntPtr) this.Vtbl[18];
        public IntPtr GetGammaRampPtr => (IntPtr) this.Vtbl[19];
        public IntPtr CreateTexturePtr => (IntPtr) this.Vtbl[20];
        public IntPtr CreateVolumeTexturePtr => (IntPtr) this.Vtbl[21];
        public IntPtr CreateCubeTexturePtr => (IntPtr) this.Vtbl[22];
        public IntPtr CreateVertexBufferPtr => (IntPtr) this.Vtbl[23];
        public IntPtr CreateIndexBufferPtr => (IntPtr) this.Vtbl[24];
        public IntPtr CreateRenderTargetPtr => (IntPtr) this.Vtbl[25];
        public IntPtr CreateDepthStencilSurfacePtr => (IntPtr) this.Vtbl[26];
        public IntPtr CreateImageSurfacePtr => (IntPtr) this.Vtbl[27];
        public IntPtr CopyRectsPtr => (IntPtr) this.Vtbl[28];
        public IntPtr UpdateTexturePtr => (IntPtr) this.Vtbl[29];
        public IntPtr GetFrontBufferPtr => (IntPtr) this.Vtbl[30];
        public IntPtr SetRenderTargetPtr => (IntPtr) this.Vtbl[31];
        public IntPtr GetRenderTargetPtr => (IntPtr) this.Vtbl[32];
        public IntPtr GetDepthStencilSurfacePtr => (IntPtr) this.Vtbl[33];
        public IntPtr BeginScenePtr => (IntPtr) this.Vtbl[34];
        public IntPtr EndScenePtr => (IntPtr) this.Vtbl[35];
        public IntPtr ClearPtr => (IntPtr) this.Vtbl[36];
        public IntPtr SetTransformPtr => (IntPtr) this.Vtbl[37];
        public IntPtr GetTransformPtr => (IntPtr) this.Vtbl[38];
        public IntPtr MultiplyTransformPtr => (IntPtr) this.Vtbl[39];
        public IntPtr SetViewportPtr => (IntPtr) this.Vtbl[40];
        public IntPtr GetViewportPtr => (IntPtr) this.Vtbl[41];
        public IntPtr SetMaterialPtr => (IntPtr) this.Vtbl[42];
        public IntPtr GetMaterialPtr => (IntPtr) this.Vtbl[43];
        public IntPtr SetLightPtr => (IntPtr) this.Vtbl[44];
        public IntPtr GetLightPtr => (IntPtr) this.Vtbl[45];
        public IntPtr LightEnablePtr => (IntPtr) this.Vtbl[46];
        public IntPtr GetLightEnablePtr => (IntPtr) this.Vtbl[47];
        public IntPtr SetClipPlanePtr => (IntPtr) this.Vtbl[48];
        public IntPtr GetClipPlanePtr => (IntPtr) this.Vtbl[49];
        public IntPtr SetRenderStatePtr => (IntPtr) this.Vtbl[50];
        public IntPtr GetRenderStatePtr => (IntPtr) this.Vtbl[51];
        public IntPtr BeginStateBlockPtr => (IntPtr) this.Vtbl[52];
        public IntPtr EndStateBlockPtr => (IntPtr) this.Vtbl[53];
        public IntPtr ApplyStateBlockPtr => (IntPtr) this.Vtbl[54];
        public IntPtr CaptureStateBlockPtr => (IntPtr) this.Vtbl[55];
        public IntPtr DeleteStateBlockPtr => (IntPtr) this.Vtbl[56];
        public IntPtr CreateStateBlockPtr => (IntPtr) this.Vtbl[57];
        public IntPtr SetClipStatusPtr => (IntPtr) this.Vtbl[58];
        public IntPtr GetClipStatusPtr => (IntPtr) this.Vtbl[59];
        public IntPtr GetTexturePtr => (IntPtr) this.Vtbl[60];
        public IntPtr SetTexturePtr => (IntPtr) this.Vtbl[61];
        public IntPtr GetTextureStageStatePtr => (IntPtr) this.Vtbl[62];
        public IntPtr SetTextureStageStatePtr => (IntPtr) this.Vtbl[63];
        public IntPtr ValidateDevicePtr => (IntPtr) this.Vtbl[64];
        public IntPtr GetInfoPtr => (IntPtr) this.Vtbl[65];
        public IntPtr SetPaletteEntriesPtr => (IntPtr) this.Vtbl[66];
        public IntPtr GetPaletteEntriesPtr => (IntPtr) this.Vtbl[67];
        public IntPtr SetCurrentTexturePalettePtr => (IntPtr) this.Vtbl[68];
        public IntPtr GetCurrentTexturePalettePtr => (IntPtr) this.Vtbl[69];
        public IntPtr DrawPrimitivePtr => (IntPtr) this.Vtbl[70];
        public IntPtr DrawIndexedPrimitivePtr => (IntPtr) this.Vtbl[71];
        public IntPtr DrawPrimitiveUPPtr => (IntPtr) this.Vtbl[72];
        public IntPtr DrawIndexedPrimitiveUPPtr => (IntPtr) this.Vtbl[73];
        public IntPtr ProcessVerticesPtr => (IntPtr) this.Vtbl[74];
        public IntPtr CreateVertexShaderPtr => (IntPtr) this.Vtbl[75];
        public IntPtr SetVertexShaderPtr => (IntPtr) this.Vtbl[76];
        public IntPtr GetVertexShaderPtr => (IntPtr) this.Vtbl[77];
        public IntPtr DeleteVertexShaderPtr => (IntPtr) this.Vtbl[78];
        public IntPtr SetVertexShaderConstantPtr => (IntPtr) this.Vtbl[79];
        public IntPtr GetVertexShaderConstantPtr => (IntPtr) this.Vtbl[80];
        public IntPtr GetVertexShaderDeclarationPtr => (IntPtr) this.Vtbl[81];
        public IntPtr GetVertexShaderFunctionPtr => (IntPtr) this.Vtbl[82];
        public IntPtr SetStreamSourcePtr => (IntPtr) this.Vtbl[83];
        public IntPtr GetStreamSourcePtr => (IntPtr) this.Vtbl[84];
        public IntPtr SetIndicesPtr => (IntPtr) this.Vtbl[85];
        public IntPtr GetIndicesPtr => (IntPtr) this.Vtbl[86];
        public IntPtr CreatePixelShaderPtr => (IntPtr) this.Vtbl[87];
        public IntPtr SetPixelShaderPtr => (IntPtr) this.Vtbl[88];
        public IntPtr GetPixelShaderPtr => (IntPtr) this.Vtbl[89];
        public IntPtr DeletePixelShaderPtr => (IntPtr) this.Vtbl[90];
        public IntPtr SetPixelShaderConstantPtr => (IntPtr) this.Vtbl[91];
        public IntPtr GetPixelShaderConstantPtr => (IntPtr) this.Vtbl[92];
        public IntPtr GetPixelShaderFunctionPtr => (IntPtr) this.Vtbl[93];
        public IntPtr DrawRectPatchPtr => (IntPtr) this.Vtbl[94];
        public IntPtr DrawTriPatchPtr => (IntPtr) this.Vtbl[95];
        public IntPtr DeletePatchPtr => (IntPtr) this.Vtbl[96];

        delegate int QueryInterfaceDelegate(Guid riid, void** ppvObj);
        delegate uint AddRefDelegate();
        delegate uint ReleaseDelegate();
        delegate int TestCooperativeLevelDelegate();
        delegate uint GetAvailableTextureMemDelegate();
        delegate int ResourceManagerDiscardBytesDelegate(int Bytes);
        delegate int GetDirect3DDelegate(IDirect3D8** ppD3D8);
        delegate int GetDeviceCapsDelegate(D3DCAPS8* pCaps);
        delegate int GetDisplayModeDelegate(D3DDISPLAYMODE* pMode);
        delegate int GetCreationParametersDelegate(D3DDEVICE_CREATION_PARAMETERS *pParameters);
        delegate int SetCursorPropertiesDelegate(uint XHotSpot, uint YHotSpot, IDirect3DSurface8* pCursorBitmap);
        delegate void SetCursorPositionDelegate(uint XScreenSpace, uint YScreenSpace, int Flags);
        delegate bool ShowCursorDelegate(int bShow);
        delegate int CreateAdditionalSwapChainDelegate(D3DPRESENT_PARAMETERS* pPresentationParameters, IDirect3DSwapChain8** pSwapChain);
        delegate int ResetDelegate(D3DPRESENT_PARAMETERS* pPresentationParameters);
        delegate int PresentDelegate(RECT* pSourceRect, RECT* pDestRect, IntPtr hDestWindowOverride, D3DRGNDATA* pDirtyRegion);
        delegate int GetBackBufferDelegate(uint BackBuffer, D3DBACKBUFFER_TYPE Type, IDirect3DSurface8** ppBackBuffer);
        delegate int GetRasterStatusDelegate(D3DRASTER_STATUS* pRasterStatus);
        delegate void SetGammaRampDelegate(int Flags, D3DGAMMARAMP* pRamp);
        delegate void GetGammaRampDelegate(D3DGAMMARAMP* pRamp);
        delegate int CreateTextureDelegate(uint Width, uint Height, uint Levels, int Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DTexture8** ppTexture);
        delegate int CreateVolumeTextureDelegate(uint Width, uint Height, uint Depth, uint Levels, int Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DVolumeTexture8** ppVolumeTexture);
        delegate int CreateCubeTextureDelegate(uint EdgeLength, uint Levels, int Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DCubeTexture8** ppCubeTexture);
        delegate int CreateVertexBufferDelegate(uint Length, int Usage, int FVF, D3DPOOL Pool, IDirect3DVertexBuffer8** ppVertexBuffer);
        delegate int CreateIndexBufferDelegate(uint Length, int Usage, D3DFORMAT Format, D3DPOOL Pool, IDirect3DIndexBuffer8** ppIndexBuffer);
        delegate int CreateRenderTargetDelegate(uint Width, uint Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, int Lockable, IDirect3DSurface8** ppSurface);
        delegate int CreateDepthStencilSurfaceDelegate(uint Width, uint Height, D3DFORMAT Format, D3DMULTISAMPLE_TYPE MultiSample, IDirect3DSurface8** ppSurface);
        delegate int CreateImageSurfaceDelegate(uint Width, uint Height, D3DFORMAT Format, IDirect3DSurface8** ppSurface);
        delegate int CopyRectsDelegate(IDirect3DSurface8* pSourceSurface, RECT* pSourceRectsArray, uint cRects, IDirect3DSurface8* pDestinationSurface, D3DPOINT* pDestPointsArray);
        delegate int UpdateTextureDelegate(IDirect3DBaseTexture8* pSourceTexture, IDirect3DBaseTexture8* pDestinationTexture);
        delegate int GetFrontBufferDelegate(IDirect3DSurface8* pDestSurface);
        delegate int SetRenderTargetDelegate(IDirect3DSurface8* pRenderTarget, IDirect3DSurface8* pNewZStencil);
        delegate int GetRenderTargetDelegate(IDirect3DSurface8** ppRenderTarget);
        delegate int GetDepthStencilSurfaceDelegate(IDirect3DSurface8** ppZStencilSurface);
        delegate int BeginSceneDelegate();
        delegate int EndSceneDelegate();
        delegate int ClearDelegate(int Count, D3DRECT* pRects, int Flags, D3DCOLOR Color, float Z, int Stencil);
        delegate int SetTransformDelegate(D3DTRANSFORMSTATETYPE State, Matrix4x4* pMatrix);
        delegate int GetTransformDelegate(D3DTRANSFORMSTATETYPE State, Matrix4x4* pMatrix);
        delegate int MultiplyTransformDelegate(D3DTRANSFORMSTATETYPE state, Matrix4x4* pMatrix);
        delegate int SetViewportDelegate(D3DVIEWPORT8* pViewport);
        delegate int GetViewportDelegate(D3DVIEWPORT8* pViewport);
        delegate int SetMaterialDelegate(D3DMATERIAL8* pMaterial);
        delegate int GetMaterialDelegate(D3DMATERIAL8* pMaterial);
        delegate int SetLightDelegate(int Index, D3DLIGHT8* light);
        delegate int GetLightDelegate(int Index, D3DLIGHT8* light);
        delegate int LightEnableDelegate(int Index, int Enable);
        delegate int GetLightEnableDelegate(int Index, int* pEnable);
        delegate int SetClipPlaneDelegate(int Index, float* pPlane);
        delegate int GetClipPlaneDelegate(int Index, float* pPlane);
        delegate int SetRenderStateDelegate(D3DRENDERSTATETYPE State, int Value);
        delegate int GetRenderStateDelegate(D3DRENDERSTATETYPE State, int* pValue);
        delegate int BeginStateBlockDelegate();
        delegate int EndStateBlockDelegate(int* pToken);
        delegate int ApplyStateBlockDelegate(int Token);
        delegate int CaptureStateBlockDelegate(int Token);
        delegate int DeleteStateBlockDelegate(int Token);
        delegate int CreateStateBlockDelegate(D3DSTATEBLOCKTYPE Type, int* pToken);
        delegate int SetClipStatusDelegate(D3DCLIPSTATUS8* pClipStatus);
        delegate int GetClipStatusDelegate(D3DCLIPSTATUS8* pClipStatus);
        delegate int GetTextureDelegate(int Stage, IDirect3DBaseTexture8** ppTexture);
        delegate int SetTextureDelegate(int Stage, IDirect3DBaseTexture8* pTexture);
        delegate int GetTextureStageStateDelegate(int Stage, D3DTEXTURESTAGESTATETYPE Type, int* pValue);
        delegate int SetTextureStageStateDelegate(int Stage, D3DTEXTURESTAGESTATETYPE Type, int Value);
        delegate int ValidateDeviceDelegate(int* pNumPasses);
        delegate int GetInfoDelegate(int DevInfoID, void* pDevInfoStruct, int DevInfoStructSize);
        delegate int SetPaletteEntriesDelegate(uint PaletteNumber, D3DPALETTEENTRY* pEntries);
        delegate int GetPaletteEntriesDelegate(uint PaletteNumber, D3DPALETTEENTRY* pEntries);
        delegate int SetCurrentTexturePaletteDelegate(uint PaletteNumber);
        delegate int GetCurrentTexturePaletteDelegate(uint *PaletteNumber);
        delegate int DrawPrimitiveDelegate(D3DPRIMITIVETYPE PrimitiveType, uint StartVertex, uint PrimitiveCount);
        delegate int DrawIndexedPrimitiveDelegate(D3DPRIMITIVETYPE primitiveType, uint minIndex, uint NumVertices, uint startIndex, uint primCount);
        delegate int DrawPrimitiveUPDelegate(D3DPRIMITIVETYPE PrimitiveType, uint PrimitiveCount, void* pVertexStreamZeroData, uint VertexStreamZeroStride);
        delegate int DrawIndexedPrimitiveUPDelegate(D3DPRIMITIVETYPE PrimitiveType, uint MinVertexIndex, uint NumVertexIndices, uint PrimitiveCount, void* pIndexData, D3DFORMAT IndexDataFormat, void* pVertexStreamZeroData, uint VertexStreamZeroStride);
        delegate int ProcessVerticesDelegate(uint SrcStartIndex, uint DestIndex, uint VertexCount, IDirect3DVertexBuffer8* pDestBuffer, int Flags);
        delegate int CreateVertexShaderDelegate(int* pDeclaration, int* pFunction, int* pHandle, int Usage);
        delegate int SetVertexShaderDelegate(int Handle);
        delegate int GetVertexShaderDelegate(int* pHandle);
        delegate int DeleteVertexShaderDelegate(int Handle);
        delegate int SetVertexShaderConstantDelegate(int Register, void* pConstantData, int ConstantCount);
        delegate int GetVertexShaderConstantDelegate(int Register, void* pConstantData, int ConstantCount);
        delegate int GetVertexShaderDeclarationDelegate(int Handle, void* pData, int* pSizeOfData);
        delegate int GetVertexShaderFunctionDelegate(int Handle, void* pData, int* pSizeOfData);
        delegate int SetStreamSourceDelegate(uint StreamNumber, IDirect3DVertexBuffer8* pStreamData, uint Stride);
        delegate int GetStreamSourceDelegate(uint StreamNumber, IDirect3DVertexBuffer8** ppStreamData, uint* pStride);
        delegate int SetIndicesDelegate(IDirect3DIndexBuffer8* pIndexData, uint BaseVertexIndex);
        delegate int GetIndicesDelegate(IDirect3DIndexBuffer8** ppIndexData, uint* pBaseVertexIndex);
        delegate int CreatePixelShaderDelegate(int* pFunction, int* pHandle);
        delegate int SetPixelShaderDelegate(int Handle);
        delegate int GetPixelShaderDelegate(int* pHandle);
        delegate int DeletePixelShaderDelegate(int Handle);
        delegate int SetPixelShaderConstantDelegate(int Register, void* pConstantData, int ConstantCount);
        delegate int GetPixelShaderConstantDelegate(int Register, void* pConstantData, int ConstantCount);
        delegate int GetPixelShaderFunctionDelegate(int Handle, void* pData, int* pSizeOfData);
        delegate int DrawRectPatchDelegate(uint Handle, float* pNumSegs, D3DRECTPATCH_INFO* pRectPatchInfo);
        delegate int DrawTriPatchDelegate(uint Handle, float* pNumSegs, D3DTRIPATCH_INFO* pTriPatchInfo);
        delegate int DeletePatchDelegate(uint Handle);

    }
}
