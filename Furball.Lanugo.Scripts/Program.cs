using Furball.Lanugo.Scripts;

string data = @"int QueryInterface= REFIID riid,void** ppvObj
uint AddRef=
uint Release=
int TestCooperativeLevel=
uint GetAvailableTextureMem=
int ResourceManagerDiscardBytes= DWORD Bytes
int GetDirect3D= IDirect3D8** ppD3D8
int GetDeviceCaps= D3DCAPS8* pCaps
int GetDisplayMode= D3DDISPLAYMODE* pMode
int GetCreationParameters= D3DDEVICE_CREATION_PARAMETERS *pParameters
int SetCursorProperties= UINT XHotSpot,UINT YHotSpot,IDirect3DSurface8* pCursorBitmap
void SetCursorPosition= UINT XScreenSpace,UINT YScreenSpace,DWORD Flags
bool ShowCursor= BOOL bShow
int CreateAdditionalSwapChain= D3DPRESENT_PARAMETERS* pPresentationParameters,IDirect3DSwapChain8** pSwapChain
int Reset= D3DPRESENT_PARAMETERS* pPresentationParameters
int Present= RECT* pSourceRect,RECT* pDestRect,HWND hDestWindowOverride,RGNDATA* pDirtyRegion
int GetBackBuffer= UINT BackBuffer,D3DBACKBUFFER_TYPE Type,IDirect3DSurface8** ppBackBuffer
int GetRasterStatus= D3DRASTER_STATUS* pRasterStatus
void SetGammaRamp= DWORD Flags,D3DGAMMARAMP* pRamp
void GetGammaRamp= D3DGAMMARAMP* pRamp
int CreateTexture= UINT Width,UINT Height,UINT Levels,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DTexture8** ppTexture
int CreateVolumeTexture= UINT Width,UINT Height,UINT Depth,UINT Levels,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DVolumeTexture8** ppVolumeTexture
int CreateCubeTexture= UINT EdgeLength,UINT Levels,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DCubeTexture8** ppCubeTexture
int CreateVertexBuffer= UINT Length,DWORD Usage,DWORD FVF,D3DPOOL Pool,IDirect3DVertexBuffer8** ppVertexBuffer
int CreateIndexBuffer= UINT Length,DWORD Usage,D3DFORMAT Format,D3DPOOL Pool,IDirect3DIndexBuffer8** ppIndexBuffer
int CreateRenderTarget= UINT Width,UINT Height,D3DFORMAT Format,D3DMULTISAMPLE_TYPE MultiSample,BOOL Lockable,IDirect3DSurface8** ppSurface
int CreateDepthStencilSurface= UINT Width,UINT Height,D3DFORMAT Format,D3DMULTISAMPLE_TYPE MultiSample,IDirect3DSurface8** ppSurface
int CreateImageSurface= UINT Width,UINT Height,D3DFORMAT Format,IDirect3DSurface8** ppSurface
int CopyRects= IDirect3DSurface8* pSourceSurface,RECT* pSourceRectsArray,UINT cRects,IDirect3DSurface8* pDestinationSurface,POINT* pDestPointsArray
int UpdateTexture= IDirect3DBaseTexture8* pSourceTexture,IDirect3DBaseTexture8* pDestinationTexture
int GetFrontBuffer= IDirect3DSurface8* pDestSurface
int SetRenderTarget= IDirect3DSurface8* pRenderTarget,IDirect3DSurface8* pNewZStencil
int GetRenderTarget= IDirect3DSurface8** ppRenderTarget
int GetDepthStencilSurface= IDirect3DSurface8** ppZStencilSurface
int BeginScene=
int EndScene=
int Clear= DWORD Count,D3DRECT* pRects,DWORD Flags,D3DCOLOR Color,float Z,DWORD Stencil
int SetTransform= D3DTRANSFORMSTATETYPE State,D3DMATRIX* pMatrix
int GetTransform= D3DTRANSFORMSTATETYPE State,D3DMATRIX* pMatrix
int MultiplyTransform= D3DTRANSFORMSTATETYPE state,D3DMATRIX* pMatrix
int SetViewport= D3DVIEWPORT8* pViewport
int GetViewport= D3DVIEWPORT8* pViewport
int SetMaterial= D3DMATERIAL8* pMaterial
int GetMaterial= D3DMATERIAL8* pMaterial
int SetLight= DWORD Index,D3DLIGHT8* light
int GetLight= DWORD Index,D3DLIGHT8* light
int LightEnable= DWORD Index,BOOL Enable
int GetLightEnable= DWORD Index,BOOL* pEnable
int SetClipPlane= DWORD Index,float* pPlane
int GetClipPlane= DWORD Index,float* pPlane
int SetRenderState= D3DRENDERSTATETYPE State,DWORD Value
int GetRenderState= D3DRENDERSTATETYPE State,DWORD* pValue
int BeginStateBlock=
int EndStateBlock= DWORD* pToken
int ApplyStateBlock= DWORD Token
int CaptureStateBlock= DWORD Token
int DeleteStateBlock= DWORD Token
int CreateStateBlock= D3DSTATEBLOCKTYPE Type,DWORD* pToken
int SetClipStatus= D3DCLIPSTATUS8* pClipStatus
int GetClipStatus= D3DCLIPSTATUS8* pClipStatus
int GetTexture= DWORD Stage,IDirect3DBaseTexture8** ppTexture
int SetTexture= DWORD Stage,IDirect3DBaseTexture8* pTexture
int GetTextureStageState= DWORD Stage,D3DTEXTURESTAGESTATETYPE Type,DWORD* pValue
int SetTextureStageState= DWORD Stage,D3DTEXTURESTAGESTATETYPE Type,DWORD Value
int ValidateDevice= DWORD* pNumPasses
int GetInfo= DWORD DevInfoID,void* pDevInfoStruct,DWORD DevInfoStructSize
int SetPaletteEntries= UINT PaletteNumber,PALETTEENTRY* pEntries
int GetPaletteEntries= UINT PaletteNumber,PALETTEENTRY* pEntries
int SetCurrentTexturePalette= UINT PaletteNumber
int GetCurrentTexturePalette= UINT *PaletteNumber
int DrawPrimitive= D3DPRIMITIVETYPE PrimitiveType,UINT StartVertex,UINT PrimitiveCount
int DrawIndexedPrimitive= D3DPRIMITIVETYPE primitiveType,UINT minIndex,UINT NumVertices,UINT startIndex,UINT primCount
int DrawPrimitiveUP= D3DPRIMITIVETYPE PrimitiveType,UINT PrimitiveCount,void* pVertexStreamZeroData,UINT VertexStreamZeroStride
int DrawIndexedPrimitiveUP= D3DPRIMITIVETYPE PrimitiveType,UINT MinVertexIndex,UINT NumVertexIndices,UINT PrimitiveCount,void* pIndexData,D3DFORMAT IndexDataFormat,void* pVertexStreamZeroData,UINT VertexStreamZeroStride
int ProcessVertices= UINT SrcStartIndex,UINT DestIndex,UINT VertexCount,IDirect3DVertexBuffer8* pDestBuffer,DWORD Flags
int CreateVertexShader= DWORD* pDeclaration,DWORD* pFunction,DWORD* pHandle,DWORD Usage
int SetVertexShader= DWORD Handle
int GetVertexShader= DWORD* pHandle
int DeleteVertexShader= DWORD Handle
int SetVertexShaderConstant= DWORD Register,void* pConstantData,DWORD ConstantCount
int GetVertexShaderConstant= DWORD Register,void* pConstantData,DWORD ConstantCount
int GetVertexShaderDeclaration= DWORD Handle,void* pData,DWORD* pSizeOfData
int GetVertexShaderFunction= DWORD Handle,void* pData,DWORD* pSizeOfData
int SetStreamSource= UINT StreamNumber,IDirect3DVertexBuffer8* pStreamData,UINT Stride
int GetStreamSource= UINT StreamNumber,IDirect3DVertexBuffer8** ppStreamData,UINT* pStride
int SetIndices= IDirect3DIndexBuffer8* pIndexData,UINT BaseVertexIndex
int GetIndices= IDirect3DIndexBuffer8** ppIndexData,UINT* pBaseVertexIndex
int CreatePixelShader= DWORD* pFunction,DWORD* pHandle
int SetPixelShader= DWORD Handle
int GetPixelShader= DWORD* pHandle
int DeletePixelShader= DWORD Handle
int SetPixelShaderConstant= DWORD Register,void* pConstantData,DWORD ConstantCount
int GetPixelShaderConstant= DWORD Register,void* pConstantData,DWORD ConstantCount
int GetPixelShaderFunction= DWORD Handle,void* pData,DWORD* pSizeOfData
int DrawRectPatch= UINT Handle,float* pNumSegs,D3DRECTPATCH_INFO* pRectPatchInfo
int DrawTriPatch= UINT Handle,float* pNumSegs,D3DTRIPATCH_INFO* pTriPatchInfo
int DeletePatch= UINT Handle
";

GenerateDelegates.Generate(data);